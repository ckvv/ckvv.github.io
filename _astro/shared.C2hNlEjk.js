async function p(t){const e=await t.arrayBuffer(),r=await crypto.subtle.digest("SHA-256",e);return Array.from(new Uint8Array(r)).map(a=>a.toString(16).padStart(2,"0")).join("")}function d(t,e=1){const a=["B","KB","MB","GB","TB","PB","EB","ZB","YB"],n=Math.floor(Math.log(t)/Math.log(1024));return`${Number.parseFloat((t/1024**n).toFixed(e))} ${a[n]}`}function l(t){return["png","jpg","jpeg","gif","tif","tiff","svg"].includes(`${t.split(".").pop()}`)}function o(t){const e=atob(t),r=e.length,a=new Uint8Array(r);for(let n=0;n<r;n++)a[n]=e.charCodeAt(n);return a.buffer}async function u(t){const e=new TextEncoder().encode(t),r=await crypto.subtle.digest("SHA-256",e);return new Uint8Array(r)}async function g(t,e){const r=new TextDecoder,a=await u(e),n=await crypto.subtle.importKey("raw",a,{name:"AES-GCM",length:256},!1,["decrypt"]),[c,s]=t.split("."),i=o(c),f=o(s),y=await crypto.subtle.decrypt({name:"AES-GCM",iv:f},n,i);return r.decode(new Uint8Array(y))}export{g as d,d as f,p as g,l as i};
