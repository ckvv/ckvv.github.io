---
import type { CollectionEntry } from 'astro:content';
import Edit from '@/assets/edit.svg';
import { REPOSITORY } from '@/consts';
import { encrypt } from '@/shared';
import { render } from 'astro:content';
import { KEY } from 'astro:env/server';
import Cusdis from './Cusdis.astro';
import Decrypt from './Decrypt.astro';
import FormattedDate from './FormattedDate.astro';
import Outline from './Outline.astro';
import Tag from './Tag.astro';


type Props = {
  post: CollectionEntry<'blog'>;
	metadata?: boolean;
	edit?: boolean;
};

const { post, metadata = true, edit = true } = Astro.props;

if (post.data.encrypt && post.rendered?.html) {
	post.rendered.html = await encrypt(`${post.rendered?.html}`, `${KEY}`);
}

const { headings, Content } = await render(post);
---

{ metadata && (<h1 class="text-4xl font-bold my-4">{post.data.title}</h1>
  <div class="my-2 flex justify-between items-center">
    <div class="flex gap-4">
      {
        Array.isArray(post.data.tags)
        && post.data.tags.map(tag => <Tag href={`/tag/${tag}/`}>{tag}</Tag>)
      }
    </div>
    <FormattedDate date={post.data.updatedDate || post.data.pubDate} />
  </div>
  <Outline headings={headings} />
)}
<div class="content">
  {post.data.encrypt ? <Decrypt data={post.rendered?.html} /> : <Content />}
</div>
{edit && (
<a
  class="flex gap-1 my-4 text-blue-600 cursor-pointer select-none"
  href={`${REPOSITORY}/tree/main/${post.filePath}`}
>
    <Edit class="w-4" />
    Edit this page on GitHub
  </a>
)}

<Cusdis
  pageID={post.data.id || Astro.url.pathname}
  pageURL={post?.filePath}
  pageTitle={post?.data.title}
/>
