---
import { type MarkdownHeading } from 'astro';

type Props = {
  headings: MarkdownHeading[];
};

const { headings } = Astro.props;
---

{
  headings?.length
? (
  <div class="sticky z-10 top-20 inline-block text-left w-full">
    <div class="2xl:hidden flex justify-end">
      <button type="button" class="inline-flex justify-center gap-x-1.5 rounded-md bg-white px-3 py-2 text-sm font-semibold text-gray-900 hover:bg-gray-50" id="menu-button" aria-expanded="false" aria-haspopup="true">
        On this page
        <svg class="-mr-1 size-5 text-gray-400" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" data-slot="icon">
          <path fill-rule="evenodd" d="M5.22 8.22a.75.75 0 0 1 1.06 0L10 11.94l3.72-3.72a.75.75 0 1 1 1.06 1.06l-4.25 4.25a.75.75 0 0 1-1.06 0L5.22 9.28a.75.75 0 0 1 0-1.06Z" clip-rule="evenodd" />
        </svg>
      </button>
    </div>

    <div id="md-outline-content" class="hidden absolute right-0 mt-2 max-w-full origin-top-right rounded-md bg-white ring-1 shadow-lg ring-black/5 focus:outline-hidden 2xl:-right-12 2xl:float-right 2xl:translate-x-full 2xl:max-w-[min(calc(50vw-580px),320px)]" aria-orientation="vertical" aria-labelledby="menu-button" tabindex="-1">
      { headings.map((v) => {
        return <a class="outline-item block px-4 py-1 text-sm !text-gray-600" href={`#${v.slug}`}>{ v.text }</a>;
      })}
    </div>
  </div>
  )
: null
}

<style>
.outline-item-active {
  color: #0284c7 !important;
}
</style>

<script>
function throttle(func: any, limit: number) {
  let lastFunc: any;
  let lastRan: any;
  return (...args: any[]) => {
    if (!lastRan) {
      func(...args);
      lastRan = Date.now();
    } else {
      clearTimeout(lastFunc);
      lastFunc = setTimeout(() => {
        if (Date.now() - lastRan >= limit) {
          func(...args);
          lastRan = Date.now();
        }
      }, limit - (Date.now() - lastRan));
    }
  };
}

function toggleMenu() {
  const button = document.getElementById('menu-button')!;
  const menu = document.getElementById('md-outline-content')!;
  const isExpanded = button.getAttribute('aria-expanded') === 'true';

  // 切换状态
  button.setAttribute('aria-expanded', `${!isExpanded}`);
  menu.style.display = isExpanded ? 'none' : 'block';
}

document.addEventListener('DOMContentLoaded', () => {
  const is2xl = window.innerWidth >= 1536;
  if (is2xl) {
    toggleMenu();
  }
  const menu = document.getElementById('md-outline-content')!;
  menu.onclick = (e: any) => {
    e.preventDefault();
    const target = document.querySelector(e.target.getAttribute('href'));
    if (target) {
      window.scrollTo({
        top: target.offsetTop - 64,
        behavior: 'smooth',
      });
    }
  };

  const menuButton = document.getElementById('menu-button')!;
  menuButton.onclick = toggleMenu;
  document.onclick = (event: any) => {
    if (is2xl) {
      return;
    }
    const menu = document.getElementById('md-outline-content')!;
    if (event.target.id !== 'menu-button' && !menu.contains(event.target) && menuButton.getAttribute('aria-expanded') === 'true') {
      toggleMenu();
    }
  };

  const sections = document.querySelector('.content')!.querySelectorAll('h1, h2, h3'); // 替换为你的锚点元素
  const navLinks = document.querySelectorAll('.outline-item'); // 替换为你的导航链接

  const observerOptions = {
    root: null, // viewport
    rootMargin: '0px',
    threshold: 0.6, // 60%可见时触发
  };

  const observerCallback = throttle((entries: any[]) => {
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        const id = entry.target.getAttribute('id');
        navLinks.forEach((link) => {
          const activeHash = `#${id}`;
          link.classList.remove('outline-item-active');
          if (link.getAttribute('href') === activeHash) {
            link.classList.add('outline-item-active');
            history.replaceState(null, '', activeHash);
          }
        });
      }
    });
  }, 200);

  const observer = new IntersectionObserver(observerCallback, observerOptions);

  sections.forEach((section) => {
    observer.observe(section);
  });
});
</script>

