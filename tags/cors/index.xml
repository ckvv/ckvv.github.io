<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>cors on CK's Blog</title><link>https://chenkai.life/tags/cors/</link><description>Recent content in cors on CK's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Wed, 09 Feb 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://chenkai.life/tags/cors/index.xml" rel="self" type="application/rss+xml"/><item><title>跨域资源共享 (CORS)</title><link>https://chenkai.life/web/cross-origin-resource-sharing/</link><pubDate>Wed, 09 Feb 2022 00:00:00 +0000</pubDate><guid>https://chenkai.life/web/cross-origin-resource-sharing/</guid><description>转载自 web.dev
浏览器的同源策略阻止了浏览器读取不同源的资源。这种机制能够阻止恶意网站读取另一个网站的数据，但也会阻碍合法使用。如果您希望获取其他国家的天气数据该怎么办？
在现代网络应用程序中，应用程序通常希望从不同源获取资源。例如，您想要从不同的域读取 JSON 数据或者将另一个网站的图像加载到&amp;lt;canvas&amp;gt;元素中。
换句话说，部分公共资源应该可以供任何人读取，但同源策略会阻碍这一点。开发者使用过诸如 JSONP 之类的变通方法，但跨域资源共享 (CORS) 能够通过标准方式修复此问题。
启用 CORS 可以让服务器告知浏览器自己已获许使用其他源。
资源请求在网络上是如何运作的？ # 图：客户端请求和服务器响应图示
浏览器和服务器可以使用超文本传输协议 (HTTP) 来通过网络交换数据。HTTP 定义了请求者和响应者之间的通信规则，其中包括获取资源所需的信息。
HTTP 标头用于协商客户端和服务器之间的消息交换类型，并用于确定访问权限。浏览器的请求和服务器的响应消息都分为两部分：标头和主体：
标头 # 包含消息的相关信息，例如消息类型或消息编码。标头可以包括各种信息，这些信息通过键值对表示。请求头和响应头包含不同的信息。
请务必注意，标头不能包含评论。
请求头示例
Accept: text/html Cookie: Version=1 以上内容相当于表示“我希望收到 HTML 的响应。这是我的一个 cookie。”
响应头示例
Content-Encoding: gzip Cache-Control: no-store 以上内容相当于表示“数据是用 gzip 编码的。请不要将其缓存。”
主体 # 消息本身。主体可以是纯文本、二进制图像、JSON、HTML 等。
CORS 是如何运作的？ # 请记住，同源策略会让浏览器阻止跨域请求。当您想从不同的源获取公共资源时，提供资源的服务器需要告知浏览器“发出该请求的这个源可以访问我的资源”。浏览器会记住这一点，并允许跨域资源共享。
第一步：客户端（浏览器）请求 # 当浏览器发出跨域请求时，该浏览器会添加一个包含当前源（协议、主机和端口）的Origin标头。</description></item></channel></rss>