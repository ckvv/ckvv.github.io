<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tool on CK's Blog</title><link>https://chenkai.life/tags/tool/</link><description>Recent content in Tool on CK's Blog</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Sun, 21 Jul 2024 22:39:20 +0800</lastBuildDate><atom:link href="https://chenkai.life/tags/tool/index.xml" rel="self" type="application/rss+xml"/><item><title>Brew</title><link>https://chenkai.life/libs/brew/</link><pubDate>Fri, 09 Jul 2021 00:00:00 +0000</pubDate><guid>https://chenkai.life/libs/brew/</guid><description>切换到国内源 ## 替换brew.git: cd &amp;#34;$(brew --repo)&amp;#34; ## 中国科大: git remote set-url origin https://mirrors.ustc.edu.cn/brew.git ## 清华大学: git remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git ## 替换homebrew-core.git: cd &amp;#34;$(brew --repo)/Library/Taps/homebrew/homebrew-core&amp;#34; ## 中国科大: git remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.git ## 清华大学: git remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git ## 替换homebrew-bottles: ## 中国科大: echo &amp;#39;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles&amp;#39; &amp;gt;&amp;gt; ~/.bash_profile source ~/.bash_profile ## 清华大学: echo &amp;#39;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles&amp;#39; &amp;gt;&amp;gt; ~/.bash_profile source ~/.bash_profile ## 应用生效: brew update 切换到官方源 ## 重置brew.git: cd &amp;#34;$(brew --repo)&amp;#34; git remote set-url origin https://github.</description></item><item><title>Docker</title><link>https://chenkai.life/libs/docker/</link><pubDate>Fri, 09 Jul 2021 00:00:00 +0000</pubDate><guid>https://chenkai.life/libs/docker/</guid><description>安装/卸载docker 安装过程参考官网;
yum update ## 使用以下命令来设置的存储库 sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo sudo yum install docker-ce docker-ce-cli containerd.io sudo systemctl start docker 卸载 sudo yum -y remove docker-ee ## 删除所有图像，容器和卷 sudo rm -rf /var/lib/docker ## 删除其他与Docker相关的资源 $ sudo rm -rf /run/docker $ sudo rm -rf /var/run/docker $ sudo rm -rf /etc/docker 安装过程中可能会遇到以下问题 doceker版本和系统内核版本不兼容 升级系统内核或者降低docker版本 yum安装失败 ## 解决依赖冲突 package-cleanup --cleandupes 找不到安装包 添加设置的存储库 容器生命周期管理 docker start :启动一个或多个已经被停止的容器 docker stop :停止一个运行中的容器 docker restart :重启容器 docker-compose 文件启动镜像 docker-compose up -d redis 创建一个新的容器但不启动，用法同docker run 使用docker镜像nginx:latest创建一个容器,并将容器命名为myrunoob docker create --name myrunoob nginx:latest 创建一个新的容器并运行一个命令 使用docker镜像nginx:latest以后台模式启动一个容器,并将容器命名为mynginx。 docker run --name mynginx -d nginx:latest 使用镜像nginx:latest以后台模式启动一个容器,并将容器的80端口映射到主机随机端口。 docker run -P -d nginx:latest 使用镜像 nginx:latest，以后台模式启动一个容器,将主机的 80 端口映射到 容器的 80 端口,主机的目录 /data 映射到容器的 /data。 docker run -p 80:80 -v /data:/data -d nginx:latest 镜像容器管理 给image打标签 docker tag e9cb35287c01 geohey-nlpa-platform:gd 保存为本地文件 docker save -o geohey-nlpa-platform.</description></item><item><title>GDAL</title><link>https://chenkai.life/libs/gdal/</link><pubDate>Fri, 09 Jul 2021 00:00:00 +0000</pubDate><guid>https://chenkai.life/libs/gdal/</guid><description>类型转换 格式ogr2ogr -f &amp;quot;fileType&amp;quot; fileName sourceFile
数据库&amp;gt;geojson
ogr2ogr -f &amp;#34;GeoJSON&amp;#34; cn_polygon.geojson PG:&amp;#34;host=localhost dbname=postgres user=postgres password=password&amp;#34; -sql &amp;#34;select * from planet_osm_polygon limit 30000&amp;#34; geojson&amp;gt;shp
ogr2ogr -f &amp;#34;ESRI Shapefile&amp;#34; test.shp china_diaoyudao.geojson.json 数据入库 geojson&amp;gt;postgre
/usr/local/Cellar/gdal2/2.3.2_1/bin/ogr2ogr -dim XY -gt 65536 -skipfailures -progress --config OGR_FORCE_ASCII NO --config PG_USE_COPY YES -overwrite -f PostgreSQL PG:&amp;#34;host=localhost port=5432 dbname=g-default user=projx password=sss&amp;#34; -lco FID=_id -lco GEOMETRY_NAME=the_geom -nln ${表名} &amp;#34;${文件名}&amp;#34; csv&amp;gt;postgre
/usr/local/Cellar/gdal2/2.3.2_1/bin/ogr2ogr -dim XY -gt 65536 -skipfailures --config PG_USE_COPY YES -overwrite -oo AUTODETECT_TYPE=YES -f PostgreSQL PG:&amp;#34;host=localhost port=5432 dbname=g-default user=projx password=sss&amp;#34; -lco FID=_id -nln ${start.</description></item><item><title>Git</title><link>https://chenkai.life/libs/git/</link><pubDate>Fri, 09 Jul 2021 00:00:00 +0000</pubDate><guid>https://chenkai.life/libs/git/</guid><description>更新git yum
#安装源 yum install http://opensource.wandisco.com/centos/7/git/x86_64/wandisco-git-release-7-2.noarch.rpm #安装git yum install git #更新git yum update git sourceTree修改大小写 sourceTree对文件名称的大小写不敏感，当你修改文件名称的大小写进行提交时，它并不能识别,
git mv work.js Work.js sourceTree回滚到历史节点 点击要回滚的历史节点，重置到历史节点，选择硬合并； 点击当前节点，重置到当前节点，选择软合并； 提交修改内容； git reset --hard e377f60e28c8b84158 git push -f origin develop git回滚 //产看git提交的id git log //查看当前分支 git status //本地重置到当前分支 git reset --hard 7c1eb09abaf873483359883175e31e979d216db0 //推送当前分支到远程 git push -f git提交规范 feat：新功能（feature） fix：修补bug docs：文档（documentation） style： 格式（不影响代码运行的变动） refactor：重构（即不是新增功能，也不是修改bug的代码变动） test：增加测试 chore：修改构建过程或辅助工具的变动，添加依赖库、工具等 perf: 代码重构。没有新功能或修复bug，优化相关，提升性能体验 revery 回滚上一个版本 &amp;mdash;写代码&amp;mdash;
git status （查看文件改变记录） git diff (查看代码级改变)</description></item><item><title>Kubectl</title><link>https://chenkai.life/libs/kubectl/</link><pubDate>Fri, 09 Jul 2021 00:00:00 +0000</pubDate><guid>https://chenkai.life/libs/kubectl/</guid><description>This page is an overview of the kubectl command.
Kubectl Autocomplete Kubectl Context and Configuration Apply Creating Objects Viewing, Finding Resources Updating Resources Patching Resources Editing Resources Scaling Resources Deleting Resources Interacting with running Pods Interacting with Nodes and Cluster What&amp;rsquo;s next kubectl - Cheat Sheet Kubectl Autocomplete BASH source &amp;lt;(kubectl completion bash) # setup autocomplete in bash into the current shell, bash-completion package should be installed first. echo &amp;#34;source &amp;lt;(kubectl completion bash)&amp;#34; &amp;gt;&amp;gt; ~/.</description></item><item><title>Nginx</title><link>https://chenkai.life/libs/nginx/</link><pubDate>Fri, 09 Jul 2021 00:00:00 +0000</pubDate><guid>https://chenkai.life/libs/nginx/</guid><description>安装 mac: brew install nginx CentOS、Oracle Linux、Rocky Linux、AlmaLinux。 安装先决条件：
sudo yum install yum-utils 要设置 yum 存储库，请创建包含 /etc/yum.repos.d/nginx.repo 以下内容的文件：
[nginx-stable] name=nginx stable repo baseurl=http://nginx.org/packages/centos/$releasever/$basearch/ gpgcheck=1 enabled=1 gpgkey=https://nginx.org/keys/nginx_signing.key module_hotfixes=true [nginx-mainline] name=nginx mainline repo baseurl=http://nginx.org/packages/mainline/centos/$releasever/$basearch/ gpgcheck=1 enabled=0 gpgkey=https://nginx.org/keys/nginx_signing.key module_hotfixes=true 要安装 nginx，请运行以下命令：
sudo yum install nginx 其他安装方式
参考https://docs.nginx.com/nginx/admin-guide/installing-nginx/installing-nginx-plus/ 参考https://nginx.org/en/linux_packages.html#instructions
Nginx命令 nginx -h查看帮助
Options: -?,-h : this help -v : show version and exit -V : show version and configure options then exit -t : test configuration and exit -T : test configuration, dump it and exit -q : suppress non-error messages during configuration testing -s signal : send signal to a master process: stop, quit, reopen, reload -p prefix : set prefix path (default: /usr/local/Cellar/nginx/1.</description></item><item><title>NPM</title><link>https://chenkai.life/libs/npm/</link><pubDate>Fri, 09 Jul 2021 00:00:00 +0000</pubDate><guid>https://chenkai.life/libs/npm/</guid><description>npm 配置 修改配置文件 npm配置文件地址~/.npmrc，npm config ls -l,npm config edit命令;
npm的全局node包在哪里？ 就是那些通过npm install xxx -g或者cnpm install xxx -g或者yarn global add xxx安装的xxx文件，到底安装在什么地方？这个其实也挺好找的。默认情况下，可以通过下面的命令查看其基础路径。
npm config get prefix npm root -g 默认的全局安装包位置： win系统下路径是：%APPDATA%/npm/node_modules/ mac系统下路径是：/usr/local/lib/node_modules/
npm 清空缓存 npm cache clean -
设置npm源
npm config set registry http://registry.npmjs.org/ npm config set registry https://registry.npm.taobao.org/ //临时使用 npm i -g express --registry https://registry.npm.taobao.org 更新npm npm install --global npm npm 发布包 # 登陆 npm login --registry http://registry.npmjs.org # 推送 npm publish --registry http://registry.</description></item><item><title>Shell</title><link>https://chenkai.life/libs/shell/</link><pubDate>Fri, 09 Jul 2021 00:00:00 +0000</pubDate><guid>https://chenkai.life/libs/shell/</guid><description>查看可用的shellcat /etc/shells 切换shell工具chsh -s /bin/bash 使环境变量生效source ~/.zshrc
mac开机自动运行shell脚本 chmod +x ./test.sh #使脚本具有执行权限 系统偏好设置 》 用户与群组 》登录项 》 添加shell脚本 执行shell脚本 作为可执行程序 chmod +x ./test.sh #使脚本具有执行权限 ./test.sh #执行脚本 作为解释器参数 这种运行方式是，直接运行解释器，其参数就是 shell 脚本的文件名，如： /bin/sh test.sh /bin/php test.php shell find 示例 - 查找命令 find /dir/to/search -name &amp;#34;file-to-search&amp;#34; find /dir/to/search -name &amp;#34;file-to-search&amp;#34; -print find /dir/to/search -name &amp;#34;file-to-search&amp;#34; -ls find /dir/to/search -name &amp;#34;regex&amp;#34; -print 要查找当前目录下的所有的Perl（特等）文件： $ find . -name '*.pl' 将。表示当前目录，-name选项指定所有pl（perl）文件。引号避免了shell扩展，当你想使用基于通配符的搜索时，它是必要的（没有引号，shell会将 .pl替换为当前目录中的文件列表）。
仅列出文件并避免所有目录 以下命令将仅列出文件，并将排除目录，特殊文件，管道，符号链接等：
find .</description></item><item><title>yum</title><link>https://chenkai.life/libs/yum/</link><pubDate>Fri, 09 Jul 2021 00:00:00 +0000</pubDate><guid>https://chenkai.life/libs/yum/</guid><description>yum是种软件包管理器，yum 主要功能是更方便的添加/删除/更新RPM 包，自动解决包的倚赖性问题，便于管理大量系统的更新问题。yum 可以同时配置多个资源库(Repository)，简洁的配置文件（/etc/yum.conf），自动解决增加或删除rpm 包时遇到的依赖性问题，保持与RPM 数据库的一致性。
配置# yum 的配置文件分为两部分：main 和repository
main 部分定义了全局配置选项，整个yum 配置文件应该只有一个main。常位于/etc/yum.conf 中。 repository 部分定义了每个源/服务器的具体配置，可以有一到多个。常位于/etc/yum.repo.d 目录下的各文件中。 yum.conf 文件一般位于/etc目录下，一般其中只包含main部分的配置选项。
# cat /etc/yum.conf
yum.conf
除了上述之外，还有一些可以添加的选项，如：
exclude=selinux*　// 排除某些软件在升级名单之外，可以用通配符，列表中各个项目要用空格隔开，这个对于安装了诸如美化包，中文补丁的朋友特别有用。 gpgcheck=1　// 有1和0两个选择，分别代表是否是否进行gpg(GNU Private Guard) 校验，以确定rpm 包的来源是有效和安全的。这个选项如果设置在[main]部分，则对每个repository 都有效。默认值为0。
1. 配置本地yum源
(1) 挂载光盘
mount /dev/cdrom /mnt/ (2)配置本地yum源
查看/etc/yum.repo.d/下有四个文件
CentOS-Base.repo 是yum 网络源的配置文件
CentOS-Media.repo 是yum 本地源的配置文件
修改CentOS-Media.repo文件
#cat /etc/yum.repo.d/CentOS-Media.repo
CentOS-Media.repo
在baseurl 中修改第2个路径为 /mnt/（即为光盘挂载点）
将enabled=0改为1
(3)禁用网络yum源
将CentOS-Base.repo 重命名为CentOS-Base.repo.bak,否则会先在网络源中寻找适合的包，改名之后直接从本地源读取。 (4) 执行yum命令测试
yum install bind 关于repo的格式# 所有repository 服务器设置都应该遵循如下格式：
[serverid] name=Some name for this server baseurl=url://path/to/repository/ serverid 是用于区别各个不同的repository，必须有一个独一无二的名称； name 是对repository 的描述，支持像𝑟𝑒𝑙𝑒𝑎𝑠𝑒𝑣𝑒𝑟releaseverbasearch这样的变量； baseurl 是服务器设置中最重要的部分，只有设置正确，才能从上面获取软件。它的格式是： baseurl=url://server1/path/to/repository/ url://server2/path/to/repository/ url://server3/path/to/repository/ 其中url 支持的协议有 http:// ftp:// file:// 三种。baseurl 后可以跟多个url，你可以自己改为速度比较快的镜像站，但baseurl 只能有一个，也就是说不能像如下格式：</description></item></channel></rss>