<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>tool on CK's Blog</title><link>https://blog.chenkai.life/tags/tool/</link><description>Recent content in tool on CK's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Fri, 23 Jul 2021 15:48:36 +0800</lastBuildDate><atom:link href="https://blog.chenkai.life/tags/tool/index.xml" rel="self" type="application/rss+xml"/><item><title>git</title><link>https://blog.chenkai.life/tools/git/</link><pubDate>Fri, 23 Jul 2021 15:48:36 +0800</pubDate><guid>https://blog.chenkai.life/tools/git/</guid><description>更新git yum
#安装源 yum install http://opensource.wandisco.com/centos/7/git/x86_64/wandisco-git-release-7-2.noarch.rpm #安装git yum install git #更新git yum update git sourceTree修改大小写 sourceTree对文件名称的大小写不敏感，当你修改文件名称的大小写进行提交时，它并不能识别,
git mv work.js Work.js sourceTree回滚到历史节点 点击要回滚的历史节点，重置到历史节点，选择硬合并； 点击当前节点，重置到当前节点，选择软合并； 提交修改内容； git reset --hard e377f60e28c8b84158 git push -f origin develop git回滚 //产看git提交的id git log //查看当前分支 git status //本地重置到当前分支 git reset --hard 7c1eb09abaf873483359883175e31e979d216db0 //推送当前分支到远程 git push -f git提交规范 feat：新功能（feature） fix：修补bug docs：文档（documentation） style： 格式（不影响代码运行的变动） refactor：重构（即不是新增功能，也不是修改bug的代码变动） test：增加测试 chore：修改构建过程或辅助工具的变动，添加依赖库、工具等 perf: 代码重构。没有新功能或修复bug，优化相关，提升性能体验 revery 回滚上一个版本 &amp;mdash;写代码&amp;mdash;</description></item><item><title>Git 子模块</title><link>https://blog.chenkai.life/tools/git_submodule/</link><pubDate>Wed, 14 Jul 2021 18:10:58 +0800</pubDate><guid>https://blog.chenkai.life/tools/git_submodule/</guid><description>转载自https://www.atlassian.com/git/tutorials/git-submodule
Git子模块(git submodule)允许您将git存储库作为另一个git存储库的子目录。 Git子模块只是对特定时间快照中另一个存储库的引用。 Git子模块使Git存储库能够合并和跟踪外部代码的版本历史记录。
如果您需要对外部依赖项进行严格的版本管理，那么使用 git 子模块是有意义的。
什么是 Git子模块 通常，代码存储库将依赖于外部代码。可以通过几种不同的方式合并此外部代码。外部代码可以直接复制粘贴到主存储库中。这种方法的缺点是会丢失对外部存储库的任何上游更改。合并外部代码的另一种方法是使用语言的包管理系统，如 Ruby Gems 或 NPM。这种方法的缺点是需要在部署源代码的所有位置进行安装和版本管理。这两种建议的合并方法都不能跟踪对外部存储库的编辑和更改。
git 子模块是宿主 git 存储库中的一条记录，它指向另一个外部存储库中的特定提交。子模块非常静态，只跟踪特定的提交。子模块不跟踪 git refs 或分支，并且不会在主机存储库更新时自动更新。将子模块添加到存储库时，将创建一个新的 .gitmodules 文件。 .gitmodules 文件包含有关子模块项目的 URL 和本地目录之间映射的元数据。如果主机存储库有多个子模块，则 .gitmodules 文件将为每个子模块提供一个条目.
Add git submodule The git submodule add is used to add a new submodule to an existing repository. The following is an example that creates an empty repo and explores git submodules.</description></item><item><title>brew</title><link>https://blog.chenkai.life/tools/brew/</link><pubDate>Fri, 09 Jul 2021 15:37:56 +0800</pubDate><guid>https://blog.chenkai.life/tools/brew/</guid><description>切换到国内源 ## 替换brew.git: cd &amp;quot;$(brew --repo)&amp;quot; ## 中国科大: git remote set-url origin https://mirrors.ustc.edu.cn/brew.git ## 清华大学: git remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git ## 替换homebrew-core.git: cd &amp;quot;$(brew --repo)/Library/Taps/homebrew/homebrew-core&amp;quot; ## 中国科大: git remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.git ## 清华大学: git remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git ## 替换homebrew-bottles: ## 中国科大: echo 'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles' &amp;gt;&amp;gt; ~/.bash_profile source ~/.bash_profile ## 清华大学: echo 'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles' &amp;gt;&amp;gt; ~/.bash_profile source ~/.bash_profile ## 应用生效: brew update 切换到官方源 ## 重置brew.</description></item><item><title>docker</title><link>https://blog.chenkai.life/tools/docker/</link><pubDate>Fri, 09 Jul 2021 15:37:56 +0800</pubDate><guid>https://blog.chenkai.life/tools/docker/</guid><description>安装/卸载docker 安装过程参考官网;
yum update ## 使用以下命令来设置的存储库 sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo sudo yum install docker-ce docker-ce-cli containerd.io sudo systemctl start docker 卸载 sudo yum -y remove docker-ee ## 删除所有图像，容器和卷 sudo rm -rf /var/lib/docker ## 删除其他与Docker相关的资源 $ sudo rm -rf /run/docker $ sudo rm -rf /var/run/docker $ sudo rm -rf /etc/docker 安装过程中可能会遇到以下问题 doceker版本和系统内核版本不兼容 升级系统内核或者降低docker版本 yum安装失败 ## 解决依赖冲突 package-cleanup --cleandupes 找不到安装包 添加设置的存储库 容器生命周期管理 docker start :启动一个或多个已经被停止的容器 docker stop :停止一个运行中的容器 docker restart :重启容器 docker-compose 文件启动镜像 docker-compose up -d redis 创建一个新的容器但不启动，用法同docker run 使用docker镜像nginx:latest创建一个容器,并将容器命名为myrunoob docker create --name myrunoob nginx:latest 创建一个新的容器并运行一个命令 使用docker镜像nginx:latest以后台模式启动一个容器,并将容器命名为mynginx。 docker run --name mynginx -d nginx:latest 使用镜像nginx:latest以后台模式启动一个容器,并将容器的80端口映射到主机随机端口。 docker run -P -d nginx:latest 使用镜像 nginx:latest，以后台模式启动一个容器,将主机的 80 端口映射到 容器的 80 端口,主机的目录 /data 映射到容器的 /data。 docker run -p 80:80 -v /data:/data -d nginx:latest 镜像容器管理 给image打标签 docker tag e9cb35287c01 geohey-nlpa-platform:gd 保存为本地文件 docker save -o geohey-nlpa-platform.</description></item><item><title>gdal命令</title><link>https://blog.chenkai.life/tools/gdal/</link><pubDate>Fri, 09 Jul 2021 15:37:56 +0800</pubDate><guid>https://blog.chenkai.life/tools/gdal/</guid><description>类型转换 格式ogr2ogr -f &amp;quot;fileType&amp;quot; fileName sourceFile
数据库&amp;gt;geojson
ogr2ogr -f &amp;quot;GeoJSON&amp;quot; cn_polygon.geojson PG:&amp;quot;host=localhost dbname=postgres user=postgres password=password&amp;quot; -sql &amp;quot;select * from planet_osm_polygon limit 30000&amp;quot; geojson&amp;gt;shp
ogr2ogr -f &amp;quot;ESRI Shapefile&amp;quot; test.shp china_diaoyudao.geojson.json 数据入库 geojson&amp;gt;postgre
/usr/local/Cellar/gdal2/2.3.2_1/bin/ogr2ogr -dim XY -gt 65536 -skipfailures -progress --config OGR_FORCE_ASCII NO --config PG_USE_COPY YES -overwrite -f PostgreSQL PG:&amp;quot;host=localhost port=5432 dbname=g-default user=projx password=sss&amp;quot; -lco FID=_id -lco GEOMETRY_NAME=the_geom -nln ${表名} &amp;quot;${文件名}&amp;quot; csv&amp;gt;postgre
/usr/local/Cellar/gdal2/2.3.2_1/bin/ogr2ogr -dim XY -gt 65536 -skipfailures --config PG_USE_COPY YES -overwrite -oo AUTODETECT_TYPE=YES -f PostgreSQL PG:&amp;quot;host=localhost port=5432 dbname=g-default user=projx password=sss&amp;quot; -lco FID=_id -nln ${start.</description></item><item><title>glob表达式</title><link>https://blog.chenkai.life/posts/glob_expression/</link><pubDate>Fri, 09 Jul 2021 15:37:56 +0800</pubDate><guid>https://blog.chenkai.life/posts/glob_expression/</guid><description>glob表达式是匹配文件路径的表达式。
glob表达式规则 Matches 0 or more characters in a single path portion ? Matches 1 character [&amp;hellip;] Matches a range of characters, similar to a RegExp range. If the first character of the range is ! or + ^ then it matches any character not in the range. !(pattern|pattern|pattern) Matches anything that does not match any of the patterns provided. ?(pattern|pattern|pattern) Matches zero or one occurrence of the patterns provided.</description></item><item><title>Jenkins</title><link>https://blog.chenkai.life/tools/jenkins/</link><pubDate>Fri, 09 Jul 2021 15:37:56 +0800</pubDate><guid>https://blog.chenkai.life/tools/jenkins/</guid><description>默认用户名：admin,查看密码：sudo vi /Users/Shared/Jenkins/Home/secrets/initialAdminPassword
安装包安装的Jenkins 修改默认端口的方法：
先关闭jenkins ; 命令行下修改端口：sudo defaults write /Library/Preferences/org.jenkins-ci httpPort 7071 启动jenkins 附：
启动jenkins： sudo launchctl load /Library/LaunchDaemons/org.jenkins-ci.plist 停止jenkins：sudo launchctl unload /Library/LaunchDaemons/org.jenkins-ci.plist
用brew安装的的Jenkins 修改默认端口的方法：
打开文件 vi /usr/local/opt/jenkins/homebrew.mxcl.jenkins.plist 修改默认端口号 启动jenkins： brew services start jenkins 停止jenkins：brew services stop jenkins 重启Jenkins：brew services restart jenkins 更新：切换到目录cd ~/.jenkins，然后用最新下载的war包替换文件夹中的war</description></item><item><title>kubectl命令</title><link>https://blog.chenkai.life/tools/kubectl/</link><pubDate>Fri, 09 Jul 2021 15:37:56 +0800</pubDate><guid>https://blog.chenkai.life/tools/kubectl/</guid><description>This page is an overview of the kubectl command.
Kubectl Autocomplete Kubectl Context and Configuration Apply Creating Objects Viewing, Finding Resources Updating Resources Patching Resources Editing Resources Scaling Resources Deleting Resources Interacting with running Pods Interacting with Nodes and Cluster What&amp;rsquo;s next kubectl - Cheat Sheet Kubectl Autocomplete BASH source &amp;lt;(kubectl completion bash) # setup autocomplete in bash into the current shell, bash-completion package should be installed first.</description></item><item><title>madlib</title><link>https://blog.chenkai.life/tools/madlib/</link><pubDate>Fri, 09 Jul 2021 15:37:56 +0800</pubDate><guid>https://blog.chenkai.life/tools/madlib/</guid><description>Apache MADlib是一个在PostgreSQL、Greenplum中使用的,用于可扩展的数据库内分析的开源库。它为结构化和非结构化数据提供数学，统计，图形和机器学习方法的数据并行实现。
我们可以用madlib做什么？ 分类 当期望的输出本质上是分类时，我们使用分类方法来构建模型，该模型预测新结果将落入哪个不同类别。分类的目标是能够使用正确的记录类正确标记传入记录。
示例：如果我们的数据描述了各种人口统计数据和申请贷款的个人的其他特征，并且我们有历史数据，其中包括过去贷款违约的情况，那么我们可以建立一个模型来描述一组新的人口统计数据的可能性 会导致贷款违约。 在这种情况下，类别是“将默认”或“不会默认”，这是两个不连续的输出类别。
回归 当期望的输出本质上是连续的时，我们使用回归方法来构建预测输出值的模型。
示例：如果我们有描述房地产列表属性的数据，那么我们可以建立一个模型来根据房屋的已知特征预测房屋的销售价值。 这是一个回归问题，因为输出响应本质上是连续的，而不是分类的。
深度学习 深度学习是一种机器学习，受大脑生物学的启发，使用一类称为人工神经网络的算法。 这些网络有效地解决了各种各样的问题，主要是在监督学习领域。 GPU加速被广泛用于加速深度神经网络的训练。
示例：如果我们想要将进入办公室大厅的员工的视频与她的图片进行匹配，我们可以使用卷积神经网络来完成此操作。 这将使她不必拿出她的员工徽章并将其刷入机器。 它还可以帮助减少早上赶时间的大厅排队。
聚类 在这里，我们尝试识别数据组，使得一个群集中的项目彼此更相似，而不是任何其他群集中的项目。
示例：在客户细分分析中，目标是识别以类似方式行事的特定客户群，以便可以设计各种营销活动以进入这些市场。 当预先知道客户群时，这将是监督的分类任务。 当我们让数据本身识别段时，这就成了一个聚类任务。
主题建模 主题建模类似于聚类，因为它尝试识别彼此相似的文档集群，但它更具体到文本域，它也在尝试识别这些文档的主要主题。
关联规则挖掘 也称为市场购物篮分析或频繁项目集挖掘，这是试图识别哪些项目往往比随机机会指示的更频繁地发生，表明项目之间的潜在关系。
示例：在在线Web商店中，关联规则挖掘可用于识别倾向于一起购买的产品。 然后，这可以用作产品推荐引擎的输入，以建议客户可能感兴趣的项目并提供加售机会。
描述性统计 描述性统计不提供模型，因此不被视为学习方法。 但是，它们可以帮助分析师提供信息以理解基础数据，并且可以为可能影响数据模型选择的数据提供有价值的见解。
示例：计算数据集的每个变量中的数据分布可以帮助分析人员了解哪些变量应该被视为分类变量，哪些变量应该被视为连续变量，包括值所属的分布类型。
验证 在不了解该模型的准确性的情况下使用模型可能导致不良结果。 因此，了解模型的错误并评估模型的测试数据准确性非常重要。 经常在数据分析中，训练数据和测试数据之间的分离仅仅是为了提供模型有效性的统计有效分析，并且评估模型不过度拟合训练数据。 还经常使用N倍交叉验证。
安装madlib 安装 src/bin/madpack -p postgres -c postgres/postgres@localhost:5432/postgres install</description></item><item><title>nginx</title><link>https://blog.chenkai.life/tools/nginx/</link><pubDate>Fri, 09 Jul 2021 15:37:56 +0800</pubDate><guid>https://blog.chenkai.life/tools/nginx/</guid><description>命令 Options: -?,-h : this help -v : show version and exit -V : show version and configure options then exit -t : test configuration and exit -T : test configuration, dump it and exit -q : suppress non-error messages during configuration testing -s signal : send signal to a master process: stop, quit, reopen, reload -p prefix : set prefix path (default: /usr/local/Cellar/nginx/1.17.3_1/) -c filename : set configuration file (default: /usr/local/etc/nginx/nginx.</description></item><item><title>npm</title><link>https://blog.chenkai.life/tools/npm/</link><pubDate>Fri, 09 Jul 2021 15:37:56 +0800</pubDate><guid>https://blog.chenkai.life/tools/npm/</guid><description>npm 配置 修改配置文件 npm配置文件地址~/.npmrc，npm config ls -l,npm config edit命令;
npm的全局node包在哪里？ 就是那些通过npm install xxx -g或者cnpm install xxx -g或者yarn global add xxx安装的xxx文件，到底安装在什么地方？这个其实也挺好找的。默认情况下，可以通过下面的命令查看其基础路径。
npm config get prefix npm root -g 默认的全局安装包位置： win系统下路径是：%APPDATA%/npm/node_modules/ mac系统下路径是：/usr/local/lib/node_modules/
npm 清空缓存 npm cache clean -
设置npm源
npm config set registry http://registry.npmjs.org/ npm config set registry https://registry.npm.taobao.org/ //临时使用 npm i -g express --registry https://registry.npm.taobao.org npm 发布包 # 登陆 npm login --registry http://registry.</description></item><item><title>yum</title><link>https://blog.chenkai.life/tools/yum/</link><pubDate>Fri, 09 Jul 2021 15:37:56 +0800</pubDate><guid>https://blog.chenkai.life/tools/yum/</guid><description>yum是种软件包管理器，yum 主要功能是更方便的添加/删除/更新RPM 包，自动解决包的倚赖性问题，便于管理大量系统的更新问题。yum 可以同时配置多个资源库(Repository)，简洁的配置文件（/etc/yum.conf），自动解决增加或删除rpm 包时遇到的依赖性问题，保持与RPM 数据库的一致性。
配置# yum 的配置文件分为两部分：main 和repository
main 部分定义了全局配置选项，整个yum 配置文件应该只有一个main。常位于/etc/yum.conf 中。 repository 部分定义了每个源/服务器的具体配置，可以有一到多个。常位于/etc/yum.repo.d 目录下的各文件中。 yum.conf 文件一般位于/etc目录下，一般其中只包含main部分的配置选项。
# cat /etc/yum.conf
yum.conf
除了上述之外，还有一些可以添加的选项，如：
　exclude=selinux*　// 排除某些软件在升级名单之外，可以用通配符，列表中各个项目要用空格隔开，这个对于安装了诸如美化包，中文补丁的朋友特别有用。 gpgcheck=1　// 有1和0两个选择，分别代表是否是否进行gpg(GNU Private Guard) 校验，以确定rpm 包的来源是有效和安全的。这个选项如果设置在[main]部分，则对每个repository 都有效。默认值为0。
1. 配置本地yum源
(1) 挂载光盘
mount /dev/cdrom /mnt/ (2)配置本地yum源
查看/etc/yum.repo.d/下有四个文件
CentOS-Base.repo 是yum 网络源的配置文件
CentOS-Media.repo 是yum 本地源的配置文件
修改CentOS-Media.repo文件
#cat /etc/yum.repo.d/CentOS-Media.repo
CentOS-Media.repo
在baseurl 中修改第2个路径为 /mnt/（即为光盘挂载点）
将enabled=0改为1
(3)禁用网络yum源
将CentOS-Base.repo 重命名为CentOS-Base.repo.bak,否则会先在网络源中寻找适合的包，改名之后直接从本地源读取。 (4) 执行yum命令测试
yum install bind 关于repo的格式# 所有repository 服务器设置都应该遵循如下格式：</description></item></channel></rss>