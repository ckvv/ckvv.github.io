<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hooks on CK's Blog</title><link>https://chenkai.life/tags/hooks/</link><description>Recent content in hooks on CK's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Mon, 21 Feb 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://chenkai.life/tags/hooks/index.xml" rel="self" type="application/rss+xml"/><item><title>react hooks 入门</title><link>https://chenkai.life/react/react-hooks/</link><pubDate>Mon, 21 Feb 2022 00:00:00 +0000</pubDate><guid>https://chenkai.life/react/react-hooks/</guid><description>React在组件变得复杂之后使用Class组件会变得更难以维护, React Hook 是 React 16.8 的新增特性。它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性。通常来说hook使得在组件之间复用状态逻辑变得便捷、逻辑也更清晰。文章主要参考了React Hooks, 在此基础上添加了更多的用例。
API 基础hook useState 在函数组件中存储内部 state
const [state, setState] = useState(initialState); 参数:
initialState: 初始值 返回值:
state: 当前的 state setState: 更新 state 的方法, 它接收一个新的 state 值并将组件的一次重新渲染加入队列。setState(newState);, 如果你的更新函数返回值与当前 state 完全相同，则随后的重渲染会被完全跳过 用例 函数式更新 惰性初始 state 跳过 state 更新 useEffect useContext</description></item></channel></rss>