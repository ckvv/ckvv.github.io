<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>NPM on CK's Blog</title><link>https://chenkai.life/tags/npm/</link><description>Recent content in NPM on CK's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Fri, 09 Jul 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://chenkai.life/tags/npm/index.xml" rel="self" type="application/rss+xml"/><item><title>NPM</title><link>https://chenkai.life/libs/npm/</link><pubDate>Fri, 09 Jul 2021 00:00:00 +0000</pubDate><guid>https://chenkai.life/libs/npm/</guid><description>npm 配置 修改配置文件 npm配置文件地址~/.npmrc，npm config ls -l,npm config edit命令;
npm的全局node包在哪里？ 就是那些通过npm install xxx -g或者cnpm install xxx -g或者yarn global add xxx安装的xxx文件，到底安装在什么地方？这个其实也挺好找的。默认情况下，可以通过下面的命令查看其基础路径。
npm config get prefix npm root -g 默认的全局安装包位置： win系统下路径是：%APPDATA%/npm/node_modules/ mac系统下路径是：/usr/local/lib/node_modules/
npm 清空缓存 npm cache clean -
设置npm源
npm config set registry http://registry.npmjs.org/ npm config set registry https://registry.npm.taobao.org/ //临时使用 npm i -g express --registry https://registry.npm.taobao.org 更新npm npm install --global npm npm 发布包 # 登陆 npm login --registry http://registry.npmjs.org # 推送 npm publish --registry http://registry.</description></item><item><title>你不知道的package.json</title><link>https://chenkai.life/posts/you-dont-konw-package-json/</link><pubDate>Fri, 09 Jul 2021 00:00:00 +0000</pubDate><guid>https://chenkai.life/posts/you-dont-konw-package-json/</guid><description>engines 描述模块的兼容性如:
指定模块运行的 node 版本
{ &amp;#34;engines&amp;#34;: { &amp;#34;Node.js&amp;#34;: &amp;#34;&amp;gt;=0.10.3 &amp;lt;15&amp;#34; } } 指定模块运行的 npm 版本
{ &amp;#34;engines&amp;#34;: { &amp;#34;npm&amp;#34;: &amp;#34;~1.0.20&amp;#34; } } 禁止使用 yarn
{ &amp;#34;engines&amp;#34;: { &amp;#34;yarn&amp;#34;: &amp;#34;please use npm&amp;#34; } } files 指定发布到 npm 中的文件,默认是所有文件[&amp;quot;*&amp;quot;] 你也可以通过.npmignore防止某些文件被包含在内，它不会覆盖files字段，但会覆盖其子目录。 如果不存在.npmignore将使用.gitignore替代
一般来说npm上我们只需要发布打包好的文件，对于git则恰好相反我们只需要提交源代码
bin 安装可执行文件 如果你的包都有一个或多个想要安装到 PATH 中的可执行文件，请在package.json中提供一个bin字段，它是命令名到本地文件名的映射。当这个包被全局安装时，该文件将被链接到全局bin所在的位置，因此它可以按名称运行。当这个包作为另一个包的依赖项安装时，该文件将被链接到该包可以直接通过 npm exec 或通过 npm run-script 调用它们时在其他脚本中的名称, 以typescript举例，在package.json文件中存在
{ &amp;#34;bin&amp;#34;: { &amp;#34;tsc&amp;#34;: &amp;#34;./bin/tsc&amp;#34;, &amp;#34;tsserver&amp;#34;: &amp;#34;./bin/tsserver&amp;#34; } } 全局安装 所以通过全局安装npm install -g typescript 我们可以在命令行中使用tsc命令, 通过which tsc 我们可以查看可执行文件在/Users/chenkai/.</description></item><item><title>如何优雅的提示用户需要升级npm依赖包版本？</title><link>https://chenkai.life/posts/npm-deprecate-version/</link><pubDate>Fri, 09 Jul 2021 00:00:00 +0000</pubDate><guid>https://chenkai.life/posts/npm-deprecate-version/</guid><description>背景 某次更新@ckpack/vue-color时引入了严重bug，影响的版本是&amp;gt;=1.0.0,&amp;lt;=1.1.3，并在1.1.4中修复了该问题，问题来了，如何优雅的提示安装该包的人需要升级1.1.4版本呢？
解决办法 首先想到的是百度、谷歌没有，但是找到🤷‍♂️ 哪就看看npm有哪些命令吧npm help access, adduser, audit, bin, bugs, cache, ci, completion, config, dedupe, deprecate, diff, dist-tag, docs, doctor, edit, exec, explain, explore, find-dupes, fund, get, help, hook, init, install, install-ci-test, install-test, link, ll, login, logout, ls, org, outdated, owner, pack, ping, pkg, prefix, profile, prune, publish, rebuild, repo, restart, root, run-script, search, set, set-script, shrinkwrap, star, stars, start, stop, team, test, token, uninstall, unpublish, unstar, update, version, view, whoami 直觉告诉我用unpublish，npm help unpublish 试试, 帮助信息中有一句 Warning Consider using the npm help deprecate command instead, if your intent is to encourage users to upgrade, or if you no longer want to maintain a package.</description></item></channel></rss>