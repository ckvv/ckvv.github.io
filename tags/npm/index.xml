<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>npm on CK's Blog</title><link>https://chenkai.life/tags/npm/</link><description>Recent content in npm on CK's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Fri, 15 Oct 2021 13:41:53 +0800</lastBuildDate><atom:link href="https://chenkai.life/tags/npm/index.xml" rel="self" type="application/rss+xml"/><item><title>你不知道的package.json</title><link>https://chenkai.life/posts/you-dont-konw-package-json/</link><pubDate>Fri, 15 Oct 2021 13:41:53 +0800</pubDate><guid>https://chenkai.life/posts/you-dont-konw-package-json/</guid><description>engines 描述模块的兼容性如:
指定模块运行的node版本
{ &amp;#34;engines&amp;#34;: { &amp;#34;node&amp;#34;: &amp;#34;&amp;gt;=0.10.3 &amp;lt;15&amp;#34; } } 指定模块运行的npm版本
{ &amp;#34;engines&amp;#34;: { &amp;#34;npm&amp;#34;: &amp;#34;~1.0.20&amp;#34; } } 禁止使用yarn
{ &amp;#34;engines&amp;#34;: { &amp;#34;yarn&amp;#34;: &amp;#34;please use npm&amp;#34; } } files 指定发布到npm中的文件,默认是所有文件[&amp;quot;*&amp;quot;] 你也可以通过.npmignore防止某些文件被包含在内，它不会覆盖files字段，但会覆盖其子目录。 如果不存在.npmignore将使用.gitignore替代
一般来说npm上我们只需要发布打包好的文件，对于git则恰好相反我们只需要提交源代码
bin 安装可执行文件 如果你的包都有一个或多个想要安装到 PATH 中的可执行文件，请在package.json中提供一个bin字段，它是命令名到本地文件名的映射。当这个包被全局安装时，该文件将被链接到全局bin所在的位置，因此它可以按名称运行。当这个包作为另一个包的依赖项安装时，该文件将被链接到该包可以直接通过 npm exec 或通过 npm run-script 调用它们时在其他脚本中的名称, 以typescript举例，在package.json文件中存在
{ &amp;#34;bin&amp;#34;: { &amp;#34;tsc&amp;#34;: &amp;#34;./bin/tsc&amp;#34;, &amp;#34;tsserver&amp;#34;: &amp;#34;./bin/tsserver&amp;#34; }, } 全局安装 所以通过全局安装npm install -g typescript 我们可以在命令行中使用tsc命令, 通过which tsc 我们可以查看可执行文件在/Users/chenkai/.</description></item><item><title>记录一些npm库和应用</title><link>https://chenkai.life/posts/npm_packages/</link><pubDate>Mon, 02 Aug 2021 00:00:00 +0000</pubDate><guid>https://chenkai.life/posts/npm_packages/</guid><description>记录一些npm库
npm工具库 nodeppt: markdown 生成web ppt
artillery: 负载接口测试
jsdoc,esdoc,documentation:构建js帮助文档
standard-version:使用semver和常规提交消息自动进行版本控制和CHANGELOG生成
Marked:markdown解析成html
markdown-it: markdown解析成html
dockerode: Docker远程API模块. nodemon: 文件更改时重新启动node服务. pm2: 具有内置负载平衡器的 Node.JS 应用程序的生产流程管理器. cypress: 端到端测试框架. eslint:eslint是一个javascript代码检测工具
ngrok: 内网穿透工具
vconsole 可以用于手机端调试查看控制台、网络请求、存储等信息 jsoneditor 基于 Web 查看、编辑、格式化和验证 JSON 的工具
axios: 基于Promise的HTTP客户端，用于浏览器和node.js
ws: 简单易用，为Node.js开辟了快速且经过全面测试的Websocket客户端和服务器
nuxtjs: 一个基于 Vue.js 的服务端渲染应用框架
fake-progress: 一个生成假进度的库
diff.js: 一个JavaScript文本diff实现
GraphQL.js:GraphQL的JavaScript参考实现，GraphQL是Facebook创建的API的查询语言。
JSONStream：流读取josn解析
http-proxy-middleware:node.js代理中间件，用于连接，表达和浏览器同步
iconv-lite: 文件编码转换
workerpool: workerpool提供了一种简单的方法来创建工作池，以动态卸载计算并管理专用工作池,runs on node.js, Chrome, Firefox, Opera, Safari, and IE10+.
graphql: api查询数据语言
apollo-server: 封装的graphql
@koa/router: 由koa-router修改而来</description></item></channel></rss>