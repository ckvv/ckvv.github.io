<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>React on CK's Blog</title><link>https://chenkai.life/tags/react/</link><description>Recent content in React on CK's Blog</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Fri, 26 Jul 2024 17:40:02 +0800</lastBuildDate><atom:link href="https://chenkai.life/tags/react/index.xml" rel="self" type="application/rss+xml"/><item><title>React Hooks 入门</title><link>https://chenkai.life/react/react-hooks/</link><pubDate>Mon, 21 Feb 2022 00:00:00 +0000</pubDate><guid>https://chenkai.life/react/react-hooks/</guid><description>在React中，如果在编写函数组件并需要向其添加一些 state，以前的做法是必须将其它转化为 class。通过一个实例化的class，保存组件的state等状态，对于每一次更新只需要调用render方法就可以。但是 Class组件在变得复杂之后会变得难以维护。
在function组件中，没有一个状态去保存这些信息，每一次函数上下文执行，所有变量，常量都重新声明，执行完毕，再被垃圾机制回收。为了保存一些状态,执行一些副作用钩子,React 16.8新增了React Hooks，去帮助记录组件的状态，处理一些额外的副作用。通过React Hook 可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性。
Hook 是一个特殊的函数，它可以让你“钩入” React 的特性。例如，useState 是允许你在 React 函数组件中添加 state 的 Hook。你可以在现有的函数组件中使用 Hook，所以通常来说hook使得在组件之间复用状态逻辑变得方便、更容易实现代码的关注点分离。
Hooks API useState 在函数组件中存储内部 state
const [state, setState] = useState(initialState); 参数:
initialState: state初始值 返回值:
state: 当前的 state setState: 更新 state 的方法, 它接收一个新的 state 值并将组件的一次重新渲染加入队列。如果你的更新函数返回值与当前 state 完全相同，则随后的重渲染会被完全跳过 基础用法 这个例子用来显示一个计数器。当你点击按钮，计数器的值就会增加
function Counter(props) { const [count, setCount] = useState(props.initialCount) return ( &amp;lt;button type=&amp;#34;button&amp;#34; onClick={() =&amp;gt; setCount(count + 1)}&amp;gt; count is: {count} &amp;lt;/button&amp;gt; ); } Counter.</description></item></channel></rss>