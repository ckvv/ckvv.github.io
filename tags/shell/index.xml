<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>shell on CK's Blog</title><link>https://chenkai.life/tags/shell/</link><description>Recent content in shell on CK's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sat, 10 Jul 2021 11:03:22 +0800</lastBuildDate><atom:link href="https://chenkai.life/tags/shell/index.xml" rel="self" type="application/rss+xml"/><item><title>node http请求解析</title><link>https://chenkai.life/nodejs/node-http_analys/</link><pubDate>Sat, 10 Jul 2021 11:03:22 +0800</pubDate><guid>https://chenkai.life/nodejs/node-http_analys/</guid><description>本指南的宗旨将让你对 HTTP 传输处理有一个清晰完整的了解。在不考虑特定编程语言及开发环境下，我们假设你已经知道在一般情况下 HTTP 是如何进行工作的。我们同样假定你熟悉 Node.js 的 EventEmitters 和 Streams。当然，如果你确实不了解它们，我们强烈建议你把以上列出的内容快速而完整地阅读一遍。
创建一个后台服务 任何网络服务应用程序总是要先创建一个服务对象。这在 Node.js 中通常通过 createServer 方法。
const http = require(&amp;#39;http&amp;#39;); const server = http.createServer((request, response) =&amp;gt; { // magic happens here! }); 每当有 HTTP 请求到达服务器时，createServer 中传入的函数就被自动执行。所以这个函数也被称为是请求处理函数。实际上，由 createServer 构造函数返回的 Server 对象是一个 EventEmitter，我们在这里仅是对创建 server 和对它添加监听事件进行了简化处理。
const server = http.createServer(); server.on(&amp;#39;request&amp;#39;, (request, response) =&amp;gt; { // the same kind of magic happens here! }); 当一个 HTTP 到达服务端，node 调用 request 处理程序，并产生一些唾手可得的对象用以处理传输，这些对象就是 request 和 response。我们马上会讲到。</description></item><item><title>批量运行node程序</title><link>https://chenkai.life/nodejs/run_multy_node_on_shell/</link><pubDate>Fri, 09 Jul 2021 16:21:38 +0800</pubDate><guid>https://chenkai.life/nodejs/run_multy_node_on_shell/</guid><description>每次开机都需要手动执行一遍所有node程序,很是麻烦，于是找了一个方法可以用脚本的形式批量打开终端tab页，并执行node程序
ttab ttab是一种macOS（OS X） CLI，用于以编程方式在标准终端应用程序中打开新的终端选项卡/窗口Terminal，具有执行命令和/或特定标题和特定显示设置。
npm install ttab ttab help ttab --help Opens a new terminal tab or window in OS X's Terminal application or iTerm2. ttab [-w] [-s &amp;lt;settings&amp;gt;] [-t &amp;lt;title&amp;gt;] [-q] [-g|-G] [-d &amp;lt;dir&amp;gt;] [&amp;lt;cmd&amp;gt; ...] -w open new tab in new terminal window -s &amp;lt;settings&amp;gt; assign a settings set (profile) -t &amp;lt;title&amp;gt; specify title for new tab -q clear the new tab's screen -g create tab in background (don't activate Terminal/iTerm) -G create tab in background and don't activate new tab -d &amp;lt;dir&amp;gt; specify working directory; -d '' disables inheriting the current dir.</description></item><item><title>glob表达式</title><link>https://chenkai.life/posts/glob_expression/</link><pubDate>Fri, 09 Jul 2021 15:37:56 +0800</pubDate><guid>https://chenkai.life/posts/glob_expression/</guid><description>glob表达式是匹配文件路径的表达式。
glob表达式规则 Matches 0 or more characters in a single path portion ? Matches 1 character [&amp;hellip;] Matches a range of characters, similar to a RegExp range. If the first character of the range is ! or + ^ then it matches any character not in the range. !(pattern|pattern|pattern) Matches anything that does not match any of the patterns provided. ?(pattern|pattern|pattern) Matches zero or one occurrence of the patterns provided.</description></item><item><title>shell 命令</title><link>https://chenkai.life/tools/shell/</link><pubDate>Fri, 09 Jul 2021 15:37:56 +0800</pubDate><guid>https://chenkai.life/tools/shell/</guid><description>查看可用的shellcat /etc/shells 切换shell工具chsh -s /bin/bash 使环境变量生效source ~/.zshrc
mac开机自动运行shell脚本 chmod +x ./test.sh #使脚本具有执行权限 系统偏好设置 》 用户与群组 》登录项 》 添加shell脚本 执行shell脚本 作为可执行程序 chmod +x ./test.sh #使脚本具有执行权限 ./test.sh #执行脚本 作为解释器参数 这种运行方式是，直接运行解释器，其参数就是 shell 脚本的文件名，如： /bin/sh test.sh /bin/php test.php shell find 示例 - 查找命令 find /dir/to/search -name &amp;quot;file-to-search&amp;quot; find /dir/to/search -name &amp;quot;file-to-search&amp;quot; -print find /dir/to/search -name &amp;quot;file-to-search&amp;quot; -ls find /dir/to/search -name &amp;quot;regex&amp;quot; -print 要查找当前目录下的所有的Perl（特等）文件： $ find .</description></item></channel></rss>