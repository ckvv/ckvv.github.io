<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Algorithms on CK's Blog</title><link>https://chenkai.life/algorithm/</link><description>Recent content in Algorithms on CK's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sat, 11 Sep 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://chenkai.life/algorithm/index.xml" rel="self" type="application/rss+xml"/><item><title>算法-array</title><link>https://chenkai.life/algorithm/leetcode-array/</link><pubDate>Sat, 11 Sep 2021 00:00:00 +0000</pubDate><guid>https://chenkai.life/algorithm/leetcode-array/</guid><description>删除排序数组中的重复项 给你一个有序数组 nums ，请你 原地 删除重复出现的元素，使每个元素 只出现一次 ，返回删除后数组的新长度。 不要使用额外的数组空间，你必须在 原地 修改输入数组 并在使用 O(1) 额外空间的条件下完成。
let removeDuplicates = function(nums) { for(let i = 0; i&amp;lt;nums.length; i++){ while (nums[i] === nums[i+1]) { nums.splice(i+1,1); } } }; 买卖股票的最佳时机 给定一个数组 prices ，其中 prices[i] 是一支给定股票第 i 天的价格。 设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。 注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）
var maxProfit = function(prices) { let ans = 0; for(let i = 1, len = prices.length; i &amp;lt; len; i++){ ans += Math.max(0, prices[i] - prices[i - 1]); } return ans; }; 旋转数组 给定一个数组，将数组中的元素向右移动 k 个位置，其中 k 是非负数。</description></item></channel></rss>